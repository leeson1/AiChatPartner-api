// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: db.proto

package redisservice

import (
	"context"

	"AiChatPartner/rpc/db/db"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BeginTransactionRequest     = db.BeginTransactionRequest
	BeginTransactionResponse    = db.BeginTransactionResponse
	CommitTransactionRequest    = db.CommitTransactionRequest
	CommitTransactionResponse   = db.CommitTransactionResponse
	ConnectRequest              = db.ConnectRequest
	ConnectResponse             = db.ConnectResponse
	CreateRequest               = db.CreateRequest
	CreateResponse              = db.CreateResponse
	DelRequest                  = db.DelRequest
	DelResponse                 = db.DelResponse
	DeleteRequest               = db.DeleteRequest
	DeleteResponse              = db.DeleteResponse
	DisconnectRequest           = db.DisconnectRequest
	DisconnectResponse          = db.DisconnectResponse
	GetRequest                  = db.GetRequest
	GetResponse                 = db.GetResponse
	ReadRequest                 = db.ReadRequest
	ReadResponse                = db.ReadResponse
	RollbackTransactionRequest  = db.RollbackTransactionRequest
	RollbackTransactionResponse = db.RollbackTransactionResponse
	SetRequest                  = db.SetRequest
	SetResponse                 = db.SetResponse
	UpdateRequest               = db.UpdateRequest
	UpdateResponse              = db.UpdateResponse

	RedisService interface {
		Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
		Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
		Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	}

	defaultRedisService struct {
		cli zrpc.Client
	}
)

func NewRedisService(cli zrpc.Client) RedisService {
	return &defaultRedisService{
		cli: cli,
	}
}

func (m *defaultRedisService) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	client := db.NewRedisServiceClient(m.cli.Conn())
	return client.Set(ctx, in, opts...)
}

func (m *defaultRedisService) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	client := db.NewRedisServiceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultRedisService) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	client := db.NewRedisServiceClient(m.cli.Conn())
	return client.Del(ctx, in, opts...)
}
