// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	acUserFieldNames          = builder.RawFieldNames(&AcUser{})
	acUserRows                = strings.Join(acUserFieldNames, ",")
	acUserRowsExpectAutoSet   = strings.Join(stringx.Remove(acUserFieldNames, "`uin`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	acUserRowsWithPlaceHolder = strings.Join(stringx.Remove(acUserFieldNames, "`uin`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAcUserUinPrefix = "cache:acUser:uin:"
)

type (
	acUserModel interface {
		Insert(ctx context.Context, data *AcUser) (sql.Result, error)
		FindOne(ctx context.Context, uin uint64) (*AcUser, error)
		Update(ctx context.Context, data *AcUser) error
		Delete(ctx context.Context, uin uint64) error
		GetUserByUsername(ctx context.Context, username string) (*AcUser, error) 
	}

	defaultAcUserModel struct {
		sqlc.CachedConn
		table string
	}

	AcUser struct {
		Uin        uint64         `db:"uin"`         // 唯一id
		Role       int64          `db:"role"`        // 用户类型
		Username   string         `db:"username"`    // 用户名
		Password   string         `db:"password"`    // 密码
		Email      sql.NullString `db:"email"`       // 邮箱
		Nickname   sql.NullString `db:"nickname"`    // 昵称
		Sex        sql.NullString `db:"sex"`         // 性别
		CreateTime sql.NullTime   `db:"create_time"` // 注册时间
		UpdateTime sql.NullTime   `db:"update_time"` // 上次更新数据时间
		Version    sql.NullInt64  `db:"version"`     // 版本号
	}
)

func newAcUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAcUserModel {
	return &defaultAcUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ac_user`",
	}
}

func (m *defaultAcUserModel) Delete(ctx context.Context, uin uint64) error {
	acUserUinKey := fmt.Sprintf("%s%v", cacheAcUserUinPrefix, uin)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `uin` = ?", m.table)
		return conn.ExecCtx(ctx, query, uin)
	}, acUserUinKey)
	return err
}

func (m *defaultAcUserModel) FindOne(ctx context.Context, uin uint64) (*AcUser, error) {
	acUserUinKey := fmt.Sprintf("%s%v", cacheAcUserUinPrefix, uin)
	var resp AcUser
	err := m.QueryRowCtx(ctx, &resp, acUserUinKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `uin` = ? limit 1", acUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uin)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAcUserModel) Insert(ctx context.Context, data *AcUser) (sql.Result, error) {
	acUserUinKey := fmt.Sprintf("%s%v", cacheAcUserUinPrefix, data.Uin)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, acUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Role, data.Username, data.Password, data.Email, data.Nickname, data.Sex, data.Version)
	}, acUserUinKey)
	return ret, err
}

func (m *defaultAcUserModel) Update(ctx context.Context, data *AcUser) error {
	acUserUinKey := fmt.Sprintf("%s%v", cacheAcUserUinPrefix, data.Uin)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `uin` = ?", m.table, acUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Role, data.Username, data.Password, data.Email, data.Nickname, data.Sex, data.Version, data.Uin)
	}, acUserUinKey)
	return err
}

func (m *defaultAcUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAcUserUinPrefix, primary)
}

func (m *defaultAcUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `uin` = ? limit 1", acUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAcUserModel) tableName() string {
	return m.table
}

func (m *defaultAcUserModel) GetUserByUsername(ctx context.Context, username string) (*AcUser, error) {
	var resp AcUser
	err := m.QueryRowCtx(ctx, &resp, username, func (ctx context.Context, conn  sqlx.SqlConn, v any)  error {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", acUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, username)
	})

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}