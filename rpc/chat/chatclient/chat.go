// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: chat.proto

package chatclient

import (
	"context"

	"AiChatPartner/rpc/chat/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq    = chat.LoginReq
	LoginRsp    = chat.LoginRsp
	UserInfoReq = chat.UserInfoReq
	UserInfoRsp = chat.UserInfoRsp

	Chat interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRsp, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

func (m *defaultChat) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultChat) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRsp, error) {
	client := chat.NewChatClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
